// Copyright 2018 gopcua authors. All rights reserved.
// Use of this source code is governed by a MIT-style license that can be
// found in the LICENSE file.

package datatypes

import (
	"testing"

	"github.com/google/go-cmp/cmp"
)

var applicationDescriptionCases = []struct {
	description string
	structured  *ApplicationDescription
	serialized  []byte
}{
	{
		"single",
		NewApplicationDescription(
			"app-uri",
			"prod-uri",
			"app-name",
			AppTypeServer,
			"gw-uri",
			"prof-uri",
			[]string{"discov-uri-1", "discov-uri-2"},
		),
		[]byte{ // Single
			// ApplicationURI
			0x07, 0x00, 0x00, 0x00, 0x61, 0x70, 0x70, 0x2d, 0x75, 0x72, 0x69,
			// ProductURI
			0x08, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x64, 0x2d, 0x75, 0x72, 0x69,
			// ApplicationName
			0x02, 0x08, 0x00, 0x00, 0x00, 0x61, 0x70, 0x70, 0x2d,
			0x6e, 0x61, 0x6d, 0x65,
			// ApplicationType
			0x00, 0x00, 0x00, 0x00,
			// GatewayServerURI
			0x06, 0x00, 0x00, 0x00, 0x67, 0x77, 0x2d, 0x75, 0x72, 0x69,
			// DiscoveryProfileURI
			0x08, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x66, 0x2d, 0x75, 0x72, 0x69,
			// DiscoveryURIs
			0x02, 0x00, 0x00, 0x00,
			0x0c, 0x00, 0x00, 0x00, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69, 0x2d, 0x31,
			0x0c, 0x00, 0x00, 0x00, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69, 0x2d, 0x32,
		},
	},
}

func TestDecodeApplicationDescription(t *testing.T) {
	for _, c := range applicationDescriptionCases {
		got, err := DecodeApplicationDescription(c.serialized)
		if err != nil {
			t.Fatal(err)
		}

		if diff := cmp.Diff(got, c.structured); diff != "" {
			t.Errorf("%s failed\n%s", c.description, diff)
		}
	}
}

func TestSerializeApplicationDescription(t *testing.T) {
	for _, c := range applicationDescriptionCases {
		got, err := c.structured.Serialize()
		if err != nil {
			t.Fatal(err)
		}

		if diff := cmp.Diff(got, c.serialized); diff != "" {
			t.Errorf("%s failed\n%s", c.description, diff)
		}
	}
}

func TestApplicationDescriptionLen(t *testing.T) {
	for _, c := range applicationDescriptionCases {
		got := c.structured.Len()

		if diff := cmp.Diff(got, len(c.serialized)); diff != "" {
			t.Errorf("%s failed\n%s", c.description, diff)
		}
	}
}

var applicationDescriptionArrayCases = []struct {
	description string
	structured  *ApplicationDescriptionArray
	serialized  []byte
}{
	{
		"array",
		NewApplicationDescriptionArray(
			[]*ApplicationDescription{
				NewApplicationDescription(
					"app-uri",
					"prod-uri",
					"app-name",
					AppTypeServer,
					"gw-uri",
					"prof-uri",
					[]string{"discov-uri-1", "discov-uri-2"},
				),
				NewApplicationDescription(
					"app-uri",
					"prod-uri",
					"app-name",
					AppTypeServer,
					"gw-uri",
					"prof-uri",
					[]string{"discov-uri-1", "discov-uri-2"},
				),
			},
		),
		[]byte{
			// ArraySize
			0x02, 0x00, 0x00, 0x00,
			// ApplicationURI
			0x07, 0x00, 0x00, 0x00, 0x61, 0x70, 0x70, 0x2d, 0x75, 0x72, 0x69,
			// ProductURI
			0x08, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x64, 0x2d, 0x75, 0x72, 0x69,
			// ApplicationName
			0x02, 0x08, 0x00, 0x00, 0x00, 0x61, 0x70, 0x70, 0x2d,
			0x6e, 0x61, 0x6d, 0x65,
			// ApplicationType
			0x00, 0x00, 0x00, 0x00,
			// GatewayServerURI
			0x06, 0x00, 0x00, 0x00, 0x67, 0x77, 0x2d, 0x75, 0x72, 0x69,
			// DiscoveryProfileURI
			0x08, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x66, 0x2d, 0x75, 0x72, 0x69,
			// DiscoveryURIs
			0x02, 0x00, 0x00, 0x00,
			0x0c, 0x00, 0x00, 0x00, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69, 0x2d, 0x31,
			0x0c, 0x00, 0x00, 0x00, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69, 0x2d, 0x32,
			// ApplicationURI
			0x07, 0x00, 0x00, 0x00, 0x61, 0x70, 0x70, 0x2d, 0x75, 0x72, 0x69,
			// ProductURI
			0x08, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x64, 0x2d, 0x75, 0x72, 0x69,
			// ApplicationName
			0x02, 0x08, 0x00, 0x00, 0x00, 0x61, 0x70, 0x70, 0x2d,
			0x6e, 0x61, 0x6d, 0x65,
			// ApplicationType
			0x00, 0x00, 0x00, 0x00,
			// GatewayServerURI
			0x06, 0x00, 0x00, 0x00, 0x67, 0x77, 0x2d, 0x75, 0x72, 0x69,
			// DiscoveryProfileURI
			0x08, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x66, 0x2d, 0x75, 0x72, 0x69,
			// DiscoveryURIs
			0x02, 0x00, 0x00, 0x00,
			0x0c, 0x00, 0x00, 0x00, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69, 0x2d, 0x31,
			0x0c, 0x00, 0x00, 0x00, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x2d, 0x75, 0x72, 0x69, 0x2d, 0x32,
		},
	},
}

func TestDecodeApplicationDescriptionArray(t *testing.T) {
	for _, c := range applicationDescriptionArrayCases {
		got, err := DecodeApplicationDescriptionArray(c.serialized)
		if err != nil {
			t.Fatal(err)
		}

		if diff := cmp.Diff(got, c.structured); diff != "" {
			t.Errorf("%s failed\n%s", c.description, diff)
		}
	}
}

func TestSerializeApplicationDescriptionArray(t *testing.T) {
	for _, c := range applicationDescriptionArrayCases {
		got, err := c.structured.Serialize()
		if err != nil {
			t.Fatal(err)
		}

		if diff := cmp.Diff(got, c.serialized); diff != "" {
			t.Errorf("%s failed\n%s", c.description, diff)
		}
	}
}

func TestApplicationDescriptionArrayLen(t *testing.T) {
	for _, c := range applicationDescriptionArrayCases {
		got := c.structured.Len()

		if diff := cmp.Diff(got, len(c.serialized)); diff != "" {
			t.Errorf("%s failed\n%s", c.description, diff)
		}
	}
}
